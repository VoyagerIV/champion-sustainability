{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useVisibleRanges = useVisibleRanges;\nvar _reactNativeReanimated = require(\"react-native-reanimated\");\nfunction useVisibleRanges(options) {\n  var _options$total = options.total,\n    total = _options$total === void 0 ? 0 : _options$total,\n    viewSize = options.viewSize,\n    translation = options.translation,\n    _options$windowSize = options.windowSize,\n    _windowSize = _options$windowSize === void 0 ? 0 : _options$windowSize;\n  var windowSize = total <= _windowSize ? total : _windowSize;\n  var ranges = (0, _reactNativeReanimated.useDerivedValue)(function () {\n    var _f = function _f() {\n      var positiveCount = Math.round(windowSize / 2);\n      var negativeCount = windowSize - positiveCount;\n      var curIndex = Math.round(-translation.value / viewSize);\n      curIndex = curIndex < 0 ? curIndex % total + total : curIndex;\n      var negativeRange = [(curIndex - negativeCount + total) % total, (curIndex - 1 + total) % total];\n      var positiveRange = [(curIndex + total) % total, (curIndex + positiveCount + total) % total];\n      if (negativeRange[0] < total && negativeRange[0] > negativeRange[1]) {\n        negativeRange[1] = total - 1;\n        positiveRange[0] = 0;\n      }\n      if (positiveRange[0] > positiveRange[1]) {\n        negativeRange[1] = total - 1;\n        positiveRange[0] = 0;\n      }\n      return {\n        negativeRange: negativeRange,\n        positiveRange: positiveRange\n      };\n    };\n    _f._closure = {\n      windowSize: windowSize,\n      translation: translation,\n      viewSize: viewSize,\n      total: total\n    };\n    _f.asString = \"function _f(){const{windowSize,translation,viewSize,total}=jsThis._closure;{const positiveCount=Math.round(windowSize/2);const negativeCount=windowSize-positiveCount;let curIndex=Math.round(-translation.value/viewSize);curIndex=curIndex<0?curIndex%total+total:curIndex;const negativeRange=[(curIndex-negativeCount+total)%total,(curIndex-1+total)%total];const positiveRange=[(curIndex+total)%total,(curIndex+positiveCount+total)%total];if(negativeRange[0]<total&&negativeRange[0]>negativeRange[1]){negativeRange[1]=total-1;positiveRange[0]=0;}if(positiveRange[0]>positiveRange[1]){negativeRange[1]=total-1;positiveRange[0]=0;}return{negativeRange:negativeRange,positiveRange:positiveRange};}}\";\n    _f.__workletHash = 15212293827170;\n    _f.__location = \"/Users/zhaodonghao/code/github/react-native-reanimated-carousel/src/hooks/useVisibleRanges.tsx (24:33)\";\n    return _f;\n  }(), [total, windowSize, translation]);\n  return ranges;\n}","map":{"version":3,"mappings":";;;;AACA;AAOO,SAASA,gBAAT,CAA0BC,OAA1B,EAKY;EACjB,qBAKIA,OALJ,CACEC,KADF;IACEA,KADF,+BACU,CADV;IAEEC,QAFF,GAKIF,OALJ,CAEEE,QAFF;IAGEC,WAHF,GAKIH,OALJ,CAGEG,WAHF;IAAAC,sBAKIJ,OALJ,CAIEK,UAJF;IAIcC,WAJd,oCAI4B,CAJ5B;EAOA,IAAMD,UAAU,GAAGJ,KAAK,IAAIK,WAAT,GAAuBL,KAAvB,GAA+BK,WAAlD;EAEA,IAAMC,MAAM,GAAG;IAAA,uBAAsB;MACnC,IAAMC,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWL,UAAU,GAAG,CAAxB,CAAtB;MACA,IAAMM,aAAa,GAAGN,UAAU,GAAGG,aAAnC;MACA,IAAII,QAAQ,GAAGH,IAAI,CAACC,KAAL,CAAW,CAACP,WAAW,CAACU,KAAb,GAAqBX,QAAhC,CAAf;MACAU,QAAQ,GAAGA,QAAQ,GAAG,CAAX,GAAgBA,QAAQ,GAAGX,KAAZ,GAAqBA,KAApC,GAA4CW,QAAvD;MACA,IAAME,aAAa,GAAG,CACpB,CAACF,QAAQ,GAAGD,aAAX,GAA2BV,KAA5B,IAAqCA,KADjB,EAEpB,CAACW,QAAQ,GAAG,CAAX,GAAeX,KAAhB,IAAyBA,KAFL,CAAtB;MAIA,IAAMc,aAAa,GAAG,CACpB,CAACH,QAAQ,GAAGX,KAAZ,IAAqBA,KADD,EAEpB,CAACW,QAAQ,GAAGJ,aAAX,GAA2BP,KAA5B,IAAqCA,KAFjB,CAAtB;MAIA,IAAIa,aAAa,CAAC,CAAD,CAAb,GAAmBb,KAAnB,IAA4Ba,aAAa,CAAC,CAAD,CAAb,GAAmBA,aAAa,CAAC,CAAD,CAAhE,EAAqE;QACnEA,aAAa,CAAC,CAAD,CAAb,GAAmBb,KAAK,GAAG,CAA3B;QACAc,aAAa,CAAC,CAAD,CAAb,GAAmB,CAAnB;MACD;MACD,IAAIA,aAAa,CAAC,CAAD,CAAb,GAAmBA,aAAa,CAAC,CAAD,CAApC,EAAyC;QACvCD,aAAa,CAAC,CAAD,CAAb,GAAmBb,KAAK,GAAG,CAA3B;QACAc,aAAa,CAAC,CAAD,CAAb,GAAmB,CAAnB;MACD;MACD,OAAO;QAAED,aAAa,EAAbA,aAAF;QAAiBC,aAAa,EAAbA;MAAjB,CAAP;IACD,CAtBc;IAAAC;MAAAX,YApBOA,UAoBP;MAAAF,aAnBYA,WAmBZ;MAAAD,UAnBgCA,QAmBhC;MAAAD,OARMA;IAQN;IAAAe;IAAAA;IAAAA;IAAA;EAAA,KAsBZ,CAACf,KAAD,EAAQI,UAAR,EAAoBF,WAApB,CAtBY,CAAf;EAwBA,OAAOI,MAAP;AACD","names":["useVisibleRanges","options","total","viewSize","translation","_options$windowSize","windowSize","_windowSize","ranges","positiveCount","Math","round","negativeCount","curIndex","value","negativeRange","positiveRange","_f"],"sources":["useVisibleRanges.tsx"],"sourcesContent":["import type Animated from \"react-native-reanimated\";\nimport { useDerivedValue } from \"react-native-reanimated\";\n\nexport type IVisibleRanges = Animated.SharedValue<{\n  negativeRange: number[]\n  positiveRange: number[]\n}>;\n\nexport function useVisibleRanges(options: {\n  total: number\n  viewSize: number\n  windowSize?: number\n  translation: Animated.SharedValue<number>\n}): IVisibleRanges {\n  const {\n    total = 0,\n    viewSize,\n    translation,\n    windowSize: _windowSize = 0,\n  } = options;\n\n  const windowSize = total <= _windowSize ? total : _windowSize;\n\n  const ranges = useDerivedValue(() => {\n    const positiveCount = Math.round(windowSize / 2);\n    const negativeCount = windowSize - positiveCount;\n    let curIndex = Math.round(-translation.value / viewSize);\n    curIndex = curIndex < 0 ? (curIndex % total) + total : curIndex;\n    const negativeRange = [\n      (curIndex - negativeCount + total) % total,\n      (curIndex - 1 + total) % total,\n    ];\n    const positiveRange = [\n      (curIndex + total) % total,\n      (curIndex + positiveCount + total) % total,\n    ];\n    if (negativeRange[0] < total && negativeRange[0] > negativeRange[1]) {\n      negativeRange[1] = total - 1;\n      positiveRange[0] = 0;\n    }\n    if (positiveRange[0] > positiveRange[1]) {\n      negativeRange[1] = total - 1;\n      positiveRange[0] = 0;\n    }\n    return { negativeRange, positiveRange };\n  }, [total, windowSize, translation]);\n\n  return ranges;\n}\n"]},"metadata":{},"sourceType":"script"}